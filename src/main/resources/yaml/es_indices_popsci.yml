Indices:
  - index_name: study_demographics
    type: neo4j
    # type mapping for each property of the index
    mapping:
      study_name:
        type: keyword
      study_id:
        type: keyword
      study_short_name:
        type: keyword
      study_description:
        type: keyword
      study_type:
        type: keyword
      study_design:
        type: keyword
      enrollment_beginning_year:
        type: integer
      enrollment_ending_year:
        type: integer
      study_beginning_year:
        type: integer
      study_ending_year:
        type: integer
      biospecimen_collection:
        type: keyword
      study_status:
        type: keyword
      dbgap_accession_id:
        type: keyword
      number_of_participants:
        type: integer
      participant_maximum_age:
        type: float
      participant_median_age:
        type: float
      participant_minimum_age:
        type: float
      participant_mean_age:
        type: float
      enrollment_period:
        type: keyword
      study_period:
        type: keyword
      participant_age_range:
        type: keyword
      participant_races:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword
      participant_sexes:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword
      participant_ethnicities:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword
      participant_count_by_age:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
                
         MATCH (study)<-[:associated_with]-(participant:participant)
        UNWIND participant.participant_race AS race_raw
        UNWIND split(toLower(race_raw), '|') AS race_group
        WITH trim(race_group) as race_group, count(*) AS race_group_count


        WITH collect(DISTINCT {
            group: race_group,
            subjects: race_group_count
        }) AS participant_races


        MATCH (study)<-[:associated_with]-(participant:participant)
        UNWIND participant.participant_sex AS sex_raw
        UNWIND split(toLower(sex_raw), '|') AS sex_group
        WITH participant_races, trim(sex_group) as sex_group, count(*) AS sex_group_count


        WITH participant_races, collect(DISTINCT {
            group: sex_group,
            subjects: sex_group_count
        }) AS participant_sexes 
        MATCH (study)<-[:associated_with]-(participant:participant)
        UNWIND participant.participant_ethnicity AS ethnicity_raw
        UNWIND split(toLower(ethnicity_raw), '|') AS ethnicity_group
        WITH participant_races, participant_sexes, trim(ethnicity_group) as ethnicity_group, count(*) AS ethnicity_group_count
          WITH participant_races,participant_sexes,collect(DISTINCT {
            group: ethnicity_group,
            subjects: ethnicity_group_count
        }) AS participant_ethnicities 


        MATCH (study:study)<-[:associated_with]-(participant:participant)
        WITH toInteger(participant.age_at_enrollment / 365.25) AS age_in_years,participant_races,participant_sexes,participant_ethnicities
        WITH toInteger(floor(age_in_years / 5) * 5) AS age_band_start, count(*) AS participant_count,participant_races, participant_sexes,participant_ethnicities
        WITH age_band_start,
          toInteger(age_band_start) + 4 AS age_band_end,
          participant_count,
          participant_races, participant_sexes,participant_ethnicities
          
        WITH toString(age_band_start) + '-' + toString(age_band_end)  AS age_group_label,participant_count,age_band_start,participant_races, participant_sexes,participant_ethnicities
        ORDER BY age_group_label
        MATCH (study:study)<-[:associated_with]-(participant:participant)
       

        RETURN
        collect(DISTINCT{
                group: age_group_label, 
                subjects: participant_count
          }) as participant_count_by_age,
          participant_races,
          participant_sexes,
          participant_ethnicities,
        study.study_name as study_name,
              study.study_short_name as study_short_name,
              study.study_id as study_id,
              study.study_description as study_description,
              study.study_type as study_type,
              study.study_design as study_design,
              study.enrollment_beginning_year as enrollment_beginning_year,
              toInteger(study.enrollment_ending_year) as enrollment_ending_year,
              toInteger(study.enrollment_beginning_year) + ' - ' + toInteger(study.enrollment_ending_year)  as enrollment_period,
              study.study_beginning_year as study_beginning_year,
              toInteger(study.study_ending_year) as study_ending_year,
              toInteger(study.study_beginning_year) + ' - ' + COALESCE(study.study_ending_year,'On Going') as study_period,
              study.biospecimen_collection as biospecimen_collection,
              study.study_status as study_status,
              study.dbgap_accession_id as dbgap_accession_id,
              count(distinct(participant)) as number_of_participants,
              toInteger(round(max(participant.age_at_enrollment / 365.25)))  as participant_maximum_age,
              toInteger(round(apoc.agg.median(participant.age_at_enrollment / 365.25)))  as participant_median_age,
              toInteger(round(avg(participant.age_at_enrollment / 365.25))) as participant_mean_age,
              toInteger(round(min(participant.age_at_enrollment / 365.25))) as participant_minimum_age,
              toInteger(round(min(participant.age_at_enrollment / 365.25))) + ' - '   + toInteger(round(max(participant.age_at_enrollment / 365.25))) as participant_age_range
      "
