Indices:
  - index_name: study_demographics
    type: neo4j
    # type mapping for each property of the index
    mapping:
      study_name:
        type: keyword
      study_id:
        type: keyword
      study_short_name:
        type: keyword
      study_description:
        type: keyword
      study_type:
        type: keyword
      study_design:
        type: keyword
      enrollment_beginning_year:
        type: integer
      enrollment_ending_year:
        type: integer
      study_beginning_year:
        type: integer
      study_ending_year:
        type: integer
      biospecimen_collection:
        type: keyword
      study_status:
        type: keyword
      dbgap_accession_id:
        type: keyword
      number_of_participants:
        type: integer
      participant_maximum_age:
        type: float
      participant_median_age:
        type: float
      participant_minimum_age:
        type: float
      participant_mean_age:
        type: float
      enrollment_period:
        type: keyword
      study_period:
        type: keyword
      enrollment_age:
        type: keyword
      race_counts:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword
      sex_counts:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword
      ethnicity_counts:
        type: nested
        properties:
          group:
            type: keyword
          participants:
            type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      
      
       
        MATCH (study)<-[:associated_with]-(participant:participant)
        UNWIND participant.participant_race AS race_raw
        UNWIND split(toLower(race_raw), '|') AS race_group
        WITH race_group, count(*) AS race_group_count


        WITH collect(DISTINCT {
            group: race_group,
            participants: race_group_count
        }) AS race_counts


        MATCH (study)<-[:associated_with]-(participant:participant)
        UNWIND participant.participant_sex AS sex_raw
        UNWIND split(toLower(sex_raw), '|') AS sex_group
        WITH race_counts, sex_group, count(*) AS sex_group_count


        WITH race_counts, collect(DISTINCT {
            group: sex_group,
            participants: sex_group_count
        }) AS sex_counts


        MATCH (study)<-[:associated_with]-(participant:participant)
        UNWIND participant.participant_ethnicity AS ethnicity_raw
        UNWIND split(toLower(ethnicity_raw), '|') AS ethnicity_group
        WITH race_counts, sex_counts, ethnicity_group, count(*) AS ethnicity_group_count,study,participant


        RETURN
          race_counts,
          sex_counts,
          collect(DISTINCT {
            group: ethnicity_group,
            participants: ethnicity_group_count
          }) AS ethnicity_counts,
        study.study_name as study_name,
              study.study_short_name as study_short_name,
              study.study_id as study_id,
              study.study_description as study_description,
              study.study_type as study_type,
              study.study_design as study_design,
              study.enrollment_beginning_year as enrollment_beginning_year,
              toInteger(study.enrollment_ending_year) as enrollment_ending_year,
              toInteger(study.enrollment_beginning_year) + ' - ' + toInteger(study.enrollment_ending_year)  as enrollment_period,
              study.study_beginning_year as study_beginning_year,
              toInteger(study.study_ending_year) as study_ending_year,
              toInteger(study.study_beginning_year) + ' - ' + COALESCE(study.study_ending_year,'On Going') as study_period,
              study.biospecimen_collection as biospecimen_collection,
              study.study_status as study_status,
              study.dbgap_accession_id as dbgap_accession_id,
              count(distinct(participant)) as number_of_participants,
              round(max(participant.age_at_enrollment))  as participant_maximum_age,
              round(apoc.agg.median(participant.age_at_enrollment))  as participant_median_age,
              round(avg(participant.age_at_enrollment)) as participant_mean_age,
              round(min(participant.age_at_enrollment)) as participant_minimum_age,
              round(min(participant.age_at_enrollment)) + ' - ' + round(max(participant.age_at_enrollment)) as enrollment_age
      "
